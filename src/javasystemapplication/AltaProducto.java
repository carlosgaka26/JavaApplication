/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javasystemapplication;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author CarlosGalvan
 */
public class AltaProducto extends javax.swing.JFrame {

    private JTable tablaProductos;
    private DefaultTableModel modeloTabla;
    private JButton btnGuardar, btnCancelar, btnAgregarFila, btnRestablecerCliente;
    private JTextArea txtObservaciones;

    private ClienteDAO clienteDAO = new ClienteDAO();
    private AlmacenDAO almacenDAO = new AlmacenDAO();
    private ProductoDAO productoDAO = new ProductoDAO();
    private InventarioDAO inventarioDAO = new InventarioDAO();

    private String clienteSeleccionado = null;

    /**
     * Creates new form AltaProducto
     */
    public AltaProducto() {
        setTitle("Alta de Productos");
        setSize(1100, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        String[] columnas = {"Cliente", "Almacén", "Producto", "Unidad de Medida", "Cantidad", "Presentación", "Lote"};
        modeloTabla = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0 && clienteSeleccionado != null) {
                    return false;
                }
                return true;
            }
        };

        tablaProductos = new JTable(modeloTabla);
        JScrollPane scrollPane = new JScrollPane(tablaProductos);
        add(scrollPane, BorderLayout.CENTER);

        tablaProductos.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(new JComboBox<>(cargarAlmacenes())));
        tablaProductos.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JComboBox<>(cargarProductos())));
        tablaProductos.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JComboBox<>(cargarUnidadesMedida())));
        tablaProductos.getColumnModel().getColumn(4).setCellEditor(crearEditorNumerico());
        tablaProductos.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(new JTextField()));
        tablaProductos.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(new JTextField()));
        tablaProductos.setRowHeight(35);

        // 🔸 Observaciones
        JPanel panelObservaciones = new JPanel(new BorderLayout());
        JLabel lblObservaciones = new JLabel("Observaciones:");
        txtObservaciones = new JTextArea(5, 50);
        txtObservaciones.setLineWrap(true);
        txtObservaciones.setWrapStyleWord(true);
        JScrollPane scrollObservaciones = new JScrollPane(txtObservaciones);
        scrollObservaciones.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        panelObservaciones.add(lblObservaciones, BorderLayout.NORTH);
        panelObservaciones.add(scrollObservaciones, BorderLayout.CENTER);

        // 🔸 Botones
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnAgregarFila = new JButton("Agregar Fila");
        btnGuardar = new JButton("Guardar");
        btnCancelar = new JButton("Cancelar");
        btnRestablecerCliente = new JButton("Restablecer Cliente"); // 🔹 Nuevo botón

        panelBotones.add(btnAgregarFila);
        panelBotones.add(btnRestablecerCliente); // 🔹 Agregado
        panelBotones.add(btnGuardar);
        panelBotones.add(btnCancelar);

        aplicarEstilos();

        btnAgregarFila.addActionListener(e -> agregarFila());
        btnCancelar.addActionListener(e -> {
            dispose();
            new PantallaProductos().setVisible(true);
        });
        btnGuardar.addActionListener(e -> guardarProductos());

        btnRestablecerCliente.addActionListener(e -> {
            clienteSeleccionado = null;
            JOptionPane.showMessageDialog(this, "Cliente restablecido. Podrás seleccionarlo en la siguiente fila.", "Cliente Restablecido", JOptionPane.INFORMATION_MESSAGE);
        });

        JPanel panelCentral = new JPanel(new BorderLayout());
        panelCentral.add(scrollPane, BorderLayout.CENTER);
        panelCentral.add(panelObservaciones, BorderLayout.SOUTH);

        add(panelCentral, BorderLayout.CENTER);
        add(panelBotones, BorderLayout.SOUTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AltaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AltaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AltaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AltaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AltaProducto().setVisible(true);
            }
        });
    }

    private void guardarProductos() {
        int filas = modeloTabla.getRowCount();
        List<Inventario> listaInventario = new ArrayList<>();

        for (int i = 0; i < filas; i++) {
            String clienteNombre = (String) modeloTabla.getValueAt(i, 0);
            String almacenNombre = (String) modeloTabla.getValueAt(i, 1);
            String productoNombre = (String) modeloTabla.getValueAt(i, 2);
            String unidadMedida = (String) modeloTabla.getValueAt(i, 3);
            int cantidad = Integer.parseInt(modeloTabla.getValueAt(i, 4).toString());
            String presentacionProducto = (String) modeloTabla.getValueAt(i, 5);
            String loteProducto = (String) modeloTabla.getValueAt(i, 6);
            String observaciones = txtObservaciones.getText().trim();

            // Verificar si hay datos vacíos
            if (clienteNombre == null || almacenNombre == null || productoNombre == null || unidadMedida == null
                    || loteProducto.isEmpty() || presentacionProducto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios para cada producto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Agregar producto a la lista
            listaInventario.add(new Inventario(clienteNombre, almacenNombre, productoNombre, unidadMedida, cantidad, presentacionProducto, loteProducto, observaciones));
        }

        // 🟢 Mostrar confirmación antes de guardar
        if (!mostrarConfirmacion(listaInventario)) {
            JOptionPane.showMessageDialog(this, "Operación cancelada.", "Cancelar", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // 🔥 Verificar si algún lote ya existe antes de guardar
        for (Inventario inv : listaInventario) {
            if (inventarioDAO.loteExiste(inv.getLoteProducto())) {
                JOptionPane.showMessageDialog(this, "Error: El lote '" + inv.getLoteProducto() + "' ya existe. Verifica los datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // 🚀 Guardar productos en inventario
        boolean guardadoExitoso = inventarioDAO.agregarProductos(listaInventario);

        if (guardadoExitoso) {
            // 🔄 También actualizar la tabla `totales`
            for (Inventario inv : listaInventario) {
                inventarioDAO.actualizarTotales(
                        inv.getAlmacenNombre(),
                        inv.getClienteNombre(),
                        inv.getProductoNombre(),
                        inv.getPresentacionProducto(),
                        inv.getCantidad()
                );
            }

            JOptionPane.showMessageDialog(this, "Productos guardados exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            generarPDFAlta(listaInventario);
            dispose(); // Cerrar la ventana después de guardar
            new PantallaProductos().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Error al guardar los productos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void aplicarEstilos() {
        Color azul = new Color(0, 102, 204);
        Color rojo = new Color(204, 0, 0);
        Color blanco = Color.WHITE;

        btnGuardar.setBackground(azul);
        btnGuardar.setForeground(blanco);
        btnCancelar.setBackground(rojo);
        btnCancelar.setForeground(blanco);
    }

    private void bloquearClienteEnFilas() {
        JTextField noEditable = new JTextField();
        noEditable.setEditable(false);
        tablaProductos.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(noEditable));
    }

    private String[] cargarProductos() {
        List<String[]> listaProductos = productoDAO.obtenerProductos();
        List<String> nombresProductos = new ArrayList<>();

        for (String[] producto : listaProductos) {
            nombresProductos.add(producto[0]); // nombre_producto
        }
        return nombresProductos.toArray(new String[0]);
    }

    private String[] cargarAlmacenes() {
        List<String[]> listaAlmacenes = almacenDAO.obtenerAlmacenes();
        List<String> nombresAlmacenes = new ArrayList<>();

        for (String[] almacen : listaAlmacenes) {
            nombresAlmacenes.add(almacen[1]); // nombre_almacen
        }
        return nombresAlmacenes.toArray(new String[0]);
    }

    private String[] cargarClientes() {
        List<String[]> listaClientes = clienteDAO.obtenerClientes();
        List<String> nombresClientes = new ArrayList<>();

        for (String[] cliente : listaClientes) {
            nombresClientes.add(cliente[1]); // nombre_cliente
        }
        return nombresClientes.toArray(new String[0]);
    }

    private void agregarFila() {
        Object cliente = "";

        // Si aún no se ha seleccionado un cliente, usar JComboBox en la primera fila
        if (clienteSeleccionado == null) {
            JComboBox<String> comboClientes = new JComboBox<>(cargarClientes());
            comboClientes.addActionListener(e -> {
                clienteSeleccionado = (String) comboClientes.getSelectedItem();
                bloquearClienteEnFilas();
            });
            tablaProductos.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboClientes));
        } else {
            cliente = clienteSeleccionado;
        }

        modeloTabla.addRow(new Object[]{cliente, "", "", "", "", "", ""});

        if (clienteSeleccionado != null) {
            bloquearClienteEnFilas();
        }
    }

    private String[] cargarUnidadesMedida() {
        String[] unidadesMedida = {"Caja", "Paquete", "Bolsa", "Bote", "Tarima", "Rollo"};
        return unidadesMedida;
    }

    // 🔹 Crear editor para cantidad (solo números)
    private DefaultCellEditor crearEditorNumerico() {
        JTextField txtCantidad = new JTextField();
        txtCantidad.setHorizontalAlignment(JTextField.RIGHT);

        txtCantidad.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!Character.isDigit(c) && c != '\b') {
                    evt.consume(); // Evitar caracteres no numéricos
                }
            }
        });

        return new DefaultCellEditor(txtCantidad);
    }

    private void ajustarTamanioColumnas() {
        TableColumnModel columnModel = tablaProductos.getColumnModel();

        // Ajustar ancho de columnas específicas
        columnModel.getColumn(0).setPreferredWidth(150); // Cliente
        columnModel.getColumn(1).setPreferredWidth(150); // Almacén
        columnModel.getColumn(2).setPreferredWidth(150); // Producto
        columnModel.getColumn(3).setPreferredWidth(100); // Cantidad
        columnModel.getColumn(4).setPreferredWidth(150); // Unidad de Medida
        columnModel.getColumn(5).setPreferredWidth(150); // Presentación
        columnModel.getColumn(6).setPreferredWidth(250); // Observaciones
        columnModel.getColumn(7).setPreferredWidth(120); // Lote
    }

    private boolean mostrarConfirmacion(List<Inventario> listaInventario) {
        String[] columnas = {"Cliente", "Almacén", "Producto", "Unidad de Medida", "Cantidad", "Presentación", "Lote", "Observaciones"};
        Object[][] datos = new Object[listaInventario.size()][8];

        // 🔹 Llenar los datos para la tabla
        for (int i = 0; i < listaInventario.size(); i++) {
            Inventario inv = listaInventario.get(i);
            datos[i][0] = inv.getClienteNombre();
            datos[i][1] = inv.getAlmacenNombre();
            datos[i][2] = inv.getProductoNombre();
            datos[i][3] = inv.getUnidadMedida();
            datos[i][4] = inv.getCantidad();
            datos[i][5] = inv.getPresentacionProducto();
            datos[i][6] = inv.getLoteProducto();
            datos[i][7] = inv.getObservaciones();
        }

        // 🔥 Crear la tabla para mostrar confirmación
        JTable tablaConfirmacion = new JTable(datos, columnas);
        tablaConfirmacion.setEnabled(false); // No editable
        tablaConfirmacion.setRowHeight(25);
        JScrollPane scrollPane = new JScrollPane(tablaConfirmacion);
        scrollPane.setPreferredSize(new Dimension(800, 300));

        // 🔹 Mostrar tabla en un JOptionPane
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                scrollPane,
                "Confirmar datos antes de guardar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        return confirmacion == JOptionPane.YES_OPTION;
    }

    private void generarPDFAlta(List<Inventario> productos) {
        if (productos.isEmpty()) {
            return;
        }

        Inventario primer = productos.get(0);
        String cliente = primer.getClienteNombre();
        String almacen = primer.getAlmacenNombre();
        String observaciones = primer.getObservaciones();

        List<String[]> datos = new ArrayList<>();
        for (Inventario inv : productos) {
            datos.add(new String[]{
                inv.getProductoNombre(),
                inv.getUnidadMedida(),
                String.valueOf(inv.getCantidad()),
                inv.getPresentacionProducto(),
                inv.getLoteProducto()
            });
        }

        GeneradorPDFAltaProducto.generarPDF(cliente, almacen, datos, observaciones);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
