/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javasystemapplication;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 *
 * @author CarlosGalvan
 */
public class EditarAlmacen extends javax.swing.JFrame {

    private JTextField txtNombreAlmacen;
    private JButton btnGuardar, btnCancelar;
    private JComboBox<String> cmbClientes;
    private int idAlmacen;
    private PantallaAlmacen parent;
    private AlmacenDAO almacenDAO;
    private ClienteDAO clienteDAO;

    /**
     * Creates new form EditarAlmacen
     */
    public EditarAlmacen(int id, String nombreAlmacen, String cliente, PantallaAlmacen parent) {
        this.idAlmacen = id;
        this.parent = parent;
        this.almacenDAO = new AlmacenDAO();
        this.clienteDAO = new ClienteDAO();

        setTitle("Editar Almacén");
        setSize(400, 250);
        setLocationRelativeTo(parent);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new GridLayout(3, 2, 10, 10));

        // Inicializar componentes
        JLabel lblNombreAlmacen = new JLabel("Nombre Almacén:");
        txtNombreAlmacen = new JTextField(nombreAlmacen);

        JLabel lblNombreCliente = new JLabel("Seleccionar Cliente:");
        cmbClientes = new JComboBox<>();

        btnGuardar = new JButton("Guardar");
        btnCancelar = new JButton("Cancelar");

        // Estilos
        aplicarEstilos();

        // Agregar componentes
        add(lblNombreAlmacen);
        add(txtNombreAlmacen);
        add(lblNombreCliente);
        add(cmbClientes);
        add(btnGuardar);
        add(btnCancelar);

        // Cargar clientes en el JComboBox
        cargarClientes(cliente);

        // Eventos
        btnGuardar.addActionListener(e -> guardarEdicion());
        btnCancelar.addActionListener(e -> dispose());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditarAlmacen(0, null, null, null).setVisible(true);
            }
        });
    }

    private void aplicarEstilos() {
        Color azul = new Color(0, 102, 204);
        Color rojo = new Color(204, 0, 0);
        Color blanco = Color.WHITE;

        btnGuardar.setBackground(azul);
        btnGuardar.setForeground(blanco);
        btnCancelar.setBackground(rojo);
        btnCancelar.setForeground(blanco);
    }

    private void cargarClientes(String clienteSeleccionado) {
        List<String[]> clientes = clienteDAO.obtenerClientes();
        cmbClientes.removeAllItems();

        for (String[] cliente : clientes) {
            String nombreCliente = cliente[1];
            cmbClientes.addItem(nombreCliente);
        }

        if (clienteSeleccionado != null) {
            cmbClientes.setSelectedItem(clienteSeleccionado);
        }
    }

    private void guardarEdicion() {
        String nombreAlmacen = txtNombreAlmacen.getText().trim();
        String nombreCliente = (String) cmbClientes.getSelectedItem();

        if (nombreAlmacen.isEmpty() || nombreCliente == null || nombreCliente.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(this,
                "¿Deseas guardar los cambios?\n\nNombre: " + nombreAlmacen + "\nCliente: " + nombreCliente,
                "Confirmar Edición", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            String clienteId = obtenerIdCliente(nombreCliente);

            if (clienteId != null) {
                if (almacenDAO.editarAlmacen(idAlmacen, nombreAlmacen, nombreCliente)) {
                    JOptionPane.showMessageDialog(this, "Almacén actualizado correctamente.");
                    parent.cargarAlmacenes(); // Actualizar tabla en la pantalla principal
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al actualizar el almacén.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String obtenerIdCliente(String nombreCliente) {
        List<String[]> clientes = clienteDAO.obtenerClientes();
        for (String[] cliente : clientes) {
            if (cliente[1].equals(nombreCliente)) {
                return cliente[0]; // El ID del cliente está en el índice 0
            }
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
