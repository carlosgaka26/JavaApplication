/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javasystemapplication;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;

/**
 *
 * @author CarlosGalvan
 */
public class EditarProducto extends javax.swing.JFrame {

    private JTextField txtNombre, txtClase, txtCantidad;
    private JComboBox<String> cmbUnidadMedida, cmbTipoCantidad;
    private JButton btnGuardar, btnCancelar;
    private String nombreOriginal;
    private ProductoDAO productoDAO = new ProductoDAO();

    /**
     * Creates new form EditarProducto
     */
    public EditarProducto(String nombreProducto) {
        this.nombreOriginal = nombreProducto;

        setTitle("Editar Producto");
        setSize(400, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        // ðŸ”¹ Panel principal
        JPanel panelPrincipal = new JPanel(new GridLayout(6, 2, 10, 10));
        panelPrincipal.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // ðŸ”¹ Campos de texto
        JLabel lblNombre = new JLabel("Nombre del Producto:");
        txtNombre = new JTextField();

        JLabel lblClase = new JLabel("Clase:");
        txtClase = new JTextField();

        JLabel lblCantidad = new JLabel("Factor:");
        txtCantidad = new JTextField();

        JLabel lblTipoCantidad = new JLabel("Tipo de Cantidad:");
        String[] tiposCantidad = {"piezas", "litros", "kilos", "metros", "gramos", "unidades"};
        cmbTipoCantidad = new JComboBox<>(tiposCantidad);

        JLabel lblUnidadMedida = new JLabel("Equivale a:");
        String[] unidades = {"caja", "paquete", "bolsa", "bote", "tarima", "rollo"};
        cmbUnidadMedida = new JComboBox<>(unidades);

        // ðŸ”¹ AÃ±adir componentes al panel principal
        panelPrincipal.add(lblNombre);
        panelPrincipal.add(txtNombre);
        panelPrincipal.add(lblClase);
        panelPrincipal.add(txtClase);
        panelPrincipal.add(lblCantidad);
        panelPrincipal.add(txtCantidad);
        panelPrincipal.add(lblTipoCantidad);
        panelPrincipal.add(cmbTipoCantidad);
        panelPrincipal.add(lblUnidadMedida);
        panelPrincipal.add(cmbUnidadMedida);

        add(panelPrincipal, BorderLayout.CENTER);

        // ðŸ”¹ Botones
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnGuardar = new JButton("Guardar Cambios");
        btnCancelar = new JButton("Cancelar");

        panelBotones.add(btnGuardar);
        panelBotones.add(btnCancelar);

        add(panelBotones, BorderLayout.SOUTH);

        // ðŸ”¹ Aplicar estilos
        aplicarEstilos();

        // ðŸš€ Cargar datos del producto seleccionado
        cargarDatosProducto(nombreProducto);

        // ðŸŽ¯ Evento para guardar cambios
        btnGuardar.addActionListener(e -> guardarCambios());

        // ðŸŽ¯ Evento para cancelar
        btnCancelar.addActionListener(e -> {
            dispose();
            new PantallaProductos().setVisible(true);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EditarProducto(null).setVisible(true);
        });
    }

    /**
     * Guarda los cambios del producto editado
     */
    private void guardarCambios() {
        String nuevoNombre = txtNombre.getText().trim();
        String nuevaClase = txtClase.getText().trim();
        String cantidadStr = txtCantidad.getText().trim();
        String tipoCantidad = (String) cmbTipoCantidad.getSelectedItem();
        String unidadMedida = (String) cmbUnidadMedida.getSelectedItem();

        // Validar campos obligatorios
        if (nuevoNombre.isEmpty() || nuevaClase.isEmpty() || cantidadStr.isEmpty() || tipoCantidad == null || unidadMedida == null) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar que la cantidad sea un nÃºmero
        int cantidad;
        try {
            cantidad = Integer.parseInt(cantidadStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un nÃºmero vÃ¡lido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // ðŸ”¥ Formato de conversiÃ³n -> "12 piezas = 1 caja" o "5 litros = 1 bote"
        String conversion = cantidad + " " + tipoCantidad.toLowerCase() + " = 1 " + unidadMedida.toLowerCase();

        // Confirmar antes de guardar cambios
        int confirmacion = JOptionPane.showConfirmDialog(this,
                "Â¿Deseas guardar los cambios del producto '" + nuevoNombre + "'?\n"
                + "Clase: " + nuevaClase + "\n"
                + "ConversiÃ³n: " + conversion,
                "Confirmar Cambios", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            boolean editado = productoDAO.editarProducto(nombreOriginal, nuevoNombre, nuevaClase, conversion);

            if (editado) {
                JOptionPane.showMessageDialog(this, "Producto actualizado con Ã©xito.", "Ã‰xito", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                new PantallaProductos().setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

/**
 * Carga los datos actuales del producto en los campos para ediciÃ³n
 */
private void cargarDatosProducto(String nombreProducto) {
    String[] datosProducto = productoDAO.obtenerProductoPorNombre(nombreProducto);

    if (datosProducto != null) {
        txtNombre.setText(datosProducto[0]); // Nombre
        txtClase.setText(datosProducto[1]);  // Clase
        String[] conversion = datosProducto[3].split(" "); // 12 piezas = 1 caja
        
        System.out.println(Arrays.toString(conversion));
        
        if (conversion.length > 0) {
            // âœ… Obtener el factor (primer nÃºmero) y asignarlo a txtCantidad
            txtCantidad.setText(conversion[0]); // Cantidad (ej. 12)
            cmbTipoCantidad.setSelectedItem(conversion[1]); // Tipo de cantidad (ej. piezas)

            // Mostrar la unidad de medida correspondiente en el combo de "Equivale a"
            String unidad = conversion[4]; // Unidad de medida (ej. caja)
            cmbUnidadMedida.setSelectedItem(unidad); // Selecciona la unidad de medida en el combo
        } else {
            // Si la conversiÃ³n no tiene el formato esperado, manejar el error
            JOptionPane.showMessageDialog(this, "El formato de conversiÃ³n es incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Error al cargar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * Aplica los estilos a los botones y componentes
     */
    private void aplicarEstilos() {
        Color azul = new Color(0, 102, 204);
        Color rojo = new Color(204, 0, 0);
        Color blanco = Color.WHITE;

        btnGuardar.setBackground(azul);
        btnGuardar.setForeground(blanco);
        btnCancelar.setBackground(rojo);
        btnCancelar.setForeground(blanco);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
